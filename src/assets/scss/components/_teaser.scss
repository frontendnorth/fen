/**
 *	Teaser
 *
 *	Primary for blogs posts, this.
 *	Thanks to: https://inclusive-components.design/cards/
 *
 **/

.c-teaser {

	clear: both;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: flex-start;
	margin-bottom: $space-xl;
	position: relative;

	// When one teaser follows another (shouldn't impact grids/lists, etc.)
	& + & {
		margin-top: $space-xxl;
	}

	@at-root .o-speaker-grid & {
		margin-bottom: inherit;
	}

	// To differentiate from `__image` - not always required
	&__text {
		flex: 1 0 0;
		// When used, assume an image is alongside, so…
		margin-top: $space-l;
		z-index: 10; // Help link function over image
	}

	&__title {
		flex: 0 1 100%;
		font-size: map-get($type-scale-major-second, l);
		font-weight: 900;
		margin-top: 0;
		margin-bottom: $space-s;
		text-transform: none;

		// Cheers https://codepen.io/m2rt/pen/KwXgaG for funky effect.
		a {
			color: $color-brand-primary;
			text-decoration: none;

			@supports (-webkit-text-fill-color: transparent) {
				-webkit-background-clip: text; // TODO: deal with via PostCSS (or whatever)
				background-clip: text;
				-webkit-text-fill-color: transparent;
				background-image: linear-gradient(
					to right,
					$color-brand-secondary,
					$color-brand-secondary 50%,
					$color-brand-primary 50%);
				background-size: 200% 100%;
				background-position: 100%;
				transition-property: background, color;
				transition-duration: 0.3s;
				transition-timing-function: cubic-bezier(0.000, 0.000, 0.230, 1);

				@media (prefers-reduced-motion: reduce) {
					transition-duration: 0s;
				}

				// Safari screws up these when text wraps, so disable
				@media not all and (min-resolution:.001dpcm) {
					background: none !important;
					-webkit-text-fill-color: initial !important;
				}
			}

			&:focus,
			&:hover {
				background-position: 0%;
				color: $color-brand-secondary;
			}

			// For clickable area
			&::after {
				// TODO: Remove whilst building
				content: '';
				bottom: 0;
				left: 0;
				position: absolute;
				right: 0;
				top: 0;
			}
		}

		// Adopts more styles from its default element
		&--default {
			// Only h2 for now…
			@at-root h2#{&} {
				font-size: map-get($type-scale-major-second, xxl);
				line-height: 1.1;

				@include mq(lg) {
					font-size: map-get($type-scale, xl);
				}
			}
		}
	}

	&__meta {
		display: block;
		flex: 0 1 100%;
		font-size: map-get($type-scale-major-second, xs);
		font-weight: 600;
		line-height: 1.3;
		margin-bottom: $space-xs;

		&--important {
			font-size: map-get($type-scale-major-second, s);
		}
	}

	&__excerpt {
		margin-top: $space-default; // consistent space with or without meta
		font-size: map-get($type-scale-major-second, s);

		> *:first-child {
			margin-top: 0;
		}

		> *:last-child {
			margin-bottom: 0;
		}
	}

	h2 + & {
		margin-top: -.5em;
	}

	// If used, requires `__text` to accompany this
	&__image {
		background: $color-text-base;
		border-radius: $radius-default;
		flex: 0 0 auto;
		height: 100px;
		margin-right: $space-l;
		overflow: hidden; // for the rounded corners
		position: relative;
		order: -1;
		width: 100px;
		transition: all 0.1s linear;

		// Split declaration so that lack of support for `:focus-within`
		// does not result in rejection of everything
		@mixin image-interaction {
			filter: brightness(1.05);
		}

		// TODO: Zoom in effect instead?
		.c-teaser:hover & {
			@include image-interaction();
		}
		.c-teaser:focus-within & {
			@include image-interaction();
		}

		img {
			display: block; // die, whitespace
			height: 100%;
			object-fit: cover;
			width: 100%;
		}
	}


	// Variations
	// Media (has an image)
	&--media {
		flex-wrap: nowrap;
	}

	// Inverted
	// Most generic first
	&--inverted {
		color: $color-text-white;

	.c-teaser {
		&__title {
			color: $color-text-white;

			a {
				color: $color-text-white;

				@supports (-webkit-text-fill-color: transparent) {
					background-image: linear-gradient(
						to right,
						$color-brand-secondary,
						$color-brand-secondary 50%,
						$color-text-white 50%);
				}

				&:focus,
				&:hover {
					color: $color-brand-secondary;
				}
			}
		}

		&__meta {
			color: rgba($color-text-white, .7);
		}
	}
	}

	// Speaker - used (large) on speaker landing page
	&--speaker {
		@include mq(sm) {
			flex-direction: column;

		.c-teaser {
			&__title {
				font-size: map-get($type-scale-major-second, xxl);
				line-height: 1.1;
				text-transform: uppercase;

				@include mq(lg) {
					font-size: map-get($type-scale, xl);
				}
			}

			&__image {
				// This, plus `img` rule below, forces box when image doesn't load
				@include responsiveRatio();

				border-radius: ($radius-default *2);
				height: auto;
				margin-right: 0;
				width: 100%;

				img {
					position: absolute;
					top: 0;
				}
			}
		}
		}
	}

	// Speaker - used (large) on speaker landing page
	&--schedule {

		flex-direction: column;
		overflow: hidden;

		@include mq(sm) {
			align-items: center;
			flex-direction: row;
			flex-wrap: nowrap;
		}

		& + & {
			margin-top: $space-xl;

			@include mq(md) {
				margin-top: $space-xxl;
			}
		}

	.c-teaser {
		&__text {
			display: flex;
			flex: 1 1 auto;
			flex-direction: column;
			padding: 0
				$space-inset-xl;
			margin-top: 0;

			@include mq(sm) {
				padding-left: 0;
			}

			&--talk {
				padding-top: $space-inset-xl;
				padding-bottom: $space-inset-xl;

				@include mq(sm) {
					@include mq(sm) {
						margin-top: 0;
					}
				}
			}

			> :last-child {
				margin-bottom: 0;
			}
		}
			&__title {
				font-size: map-get($type-scale-major-second, xl);
				margin-right: $space-xxl;

				@include mq(sm) {
					margin-right: $space-xxxl;
				}

				@include mq(lg) {
					margin-right: 0;
				}
			}

			&__excerpt {
				color: rgba($color-text-white, .85);
				margin-top: 0;

				@include mq(sm) {
					margin-right: $space-xxxl;
				}

				@include mq(md) {
					margin-right: 0;
				}
			}

			&__meta {
				color: $color-text-white;
				font-size: map-get($type-scale-major-second, default);
				order: -1;
				text-transform: uppercase;
			}

		&__image {
			display: none;

			@supports(clip-path: url('#svgPath')) {
				margin-right: 0;
				position: absolute;
				right: -($space-xl *1.5);
				top: -($space-xl *1.5);
				border-radius: 0;
				display: block;
				height: ($space-xxxl *1.5);
				background: rgba(#000, .25);
				clip-path: url('#svgPath');
				width: ($space-xxxl *1.5);

				> img {
					bottom: 0;
					height: calc(100% - #{$space-xl});
					position: absolute;
					left: 0;
					width: calc(100% - #{$space-xl});
				}
			}

			@include mq(md) {
				background-color: $color-brand-primary;
				bottom: 0;
				clip-path: none;
				height: 100%;
				right: 0;
				top: 0;
				width: 140px;

				> img {
					height: 100%;
					width: 100%;
				}
			}
		}

		&__icon {
			align-self: flex-start;
			z-index: 20;
			margin-top: $space-xl;

			@include mq(md) {
				margin-top: -($icon-size /2);
				position: absolute;
				top: 50%;
				right: (($space-xxxl *1.5) - $space-l);
			}
		}

		&__time {
			color: rgba($color-text-white, .7);
			font-weight: bold;
			order: -1;
			padding: 0
				0
				0
				$space-inset-xl;

			@include mq(sm) {
				flex: 0 0 calc(4rem + #{$space-l});
				padding-right: $space-l;
			}

			@include mq(md) {
				flex-basis: calc(6rem + #{$space-xxl - $space-l});
			}

			&--lg {
				align-self: flex-start;
				color: $color-text-white;
				font-size: map-get($type-scale-major-second, xxxl);
				padding-top: $space-inset-xl;

				@include mq(md) {
					align-self: center;
					font-size: map-get($type-scale, xxl);
					padding-top: 0;
				}
			}
		}
	}
	}

}
